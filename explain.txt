3.5 템플릿과 콜백

3.5.1 템플릿/콜백 동작원리

 - 템플릿/콜백의 특징
  여러 개의 메서드를 가진 일반적인 인터페이스를 사용할 수 있는 전략 패턴의 전략과 달리
 템플릿/콜백 패턴의 콜백은 보통 단일 메서드 인터페이스를 사용한다. 템플릿의 작업 흐름 중
 특정 기능을 위해 한 번 호출되는 경우가 일반적이기 때문이다
 하나의 템플릿에서 여러가지 종류의 전략을 사용해야 한다면 하나 이상의 콜백 오브젝트를 사용 할
 수도 있다.
 콜백은 일반적으로 하나의 메서드를 가진 인터페이스를 구현한 익명 내부 클래스로
 만들어진다고 보면 된다.

  콜백 인터페이스의 메서드에는 보통 파라미터가 있다. 이 파라미터는 템플릿의 작업 흐름 중에
 만들어지는 컨텍스트 정보를 전달받을 때 사용된다.
 JdbcContext에서는 템플릿인 workWithStatementStrategy() 메서드 내에서 생성한 Connection 오브젝트를
 콜백의 메서드인 makePreparedStatement()를 실행할 때 파라미터로 넘겨준다.
 PreparedStatement를 만들기 위해서는 JDBC 컨텍스트/템플릿 안에서 만들어진 DB 커넥션이 필요하기
 때문이다.

 3.5.2 편리한 콜백의 재활용
  템플릿/콜백 방식은 템플릿에 담긴 코드를 여기저기서 반복적으로 사용하는 원시적인 방법에 비해
 많은 장점이 있다.
 당장에 JdbcContext를 사용하기만 해도 기존에 JDBC기반의 코드를 만들었을 때 발생했던 여러가지
 문제점과 불편한 점을 제거할 수 있다.
 클라이언트인 DAO의 메서드는 간결해지고 최소한의 데이터 액세스 로직만 갖고 있게 된다.

  그런데 템플릿/콜백 방식에서 한 가지 아쉬운 점이 있다. DAO 메서드에서 매번 익명 내부 클래스를
 사용하기 때문에 상대적으로 코드를 작성하고 읽기가 조금 불편하다는 점이다.
 IDE의 편리한 코드 생성 기능을 잘 활용하면 익명 내부 클래스 코드 작성도 그리 불편한 것은 아니지만
 그래도 익숙하지 않은 코드 스타일에 적지 않게 중첩된 괄호를 보면 조금 답답해 보일 수 있다.
