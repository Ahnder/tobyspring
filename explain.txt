5.1.5 코드 개선

upgradeLevels() 리팩토링

리팩토링한 코드 중
    private void upgradeLevel(User user) {
        if (user.getLevel() == Level.BASIC) user.setLevel(Level.SILVER);
        else if (user.getLevel() == Level.SILVER) user.setLevel(Level.GOLD);

        userDao.update(user);
    }
이 upgradeLevel() 메서드는 문제가 있다.

 다음 단계가 무엇인가 하는 로직과 그때 사용자 오브젝트의 level 필드를 변경해준다는 로직이 함께 있는데다,
너무 노골적으로 드러나 있다. 게다가 예외상황에 대한 처리가 없다.
만약 업그레이드 조건을 잘못 파악해서 더 이상 다음 단계가 없는 GOLD 레벨인 사용자를 업그레이드 하려고 이 메서드를
호출한다면 아무것도 처리하지 않고 그냥 DAO의 업데이트 메서드만 실행될 것이다.
레벨이 늘어나면 if 문이 점점 길어질 것이고, 레벨 변경 시 사용자 오브젝트에서 level 필드 외의 값도 같이 변경해야 한다면
if 조건 뒤에 붙는 내용도 점점 길어질 것이다.

그러므로 레벨의 순서와 다음 단계 레벨이 무엇인지를 결정하는 일은 Level에게 맡기자.
레벨의 순서를 굳이 UserService에 담아둘 이유가 없다.

 Level 이넘에 next라는 다음 단계 레벨 정보를 담을 수 있도록 필드를 추가한다. 생성자 파라미터를 추가해서 다음 단계 레벨 정보를
지정할 수 있게 해준다. Level 이넘을 정의할 때 DB에 저장될 값과 다음 레벨이 무엇인지를 함께 넣어줄 수 있다.
그리고 다음 레벨이 무엇인지를 알고 싶다면 nextLevel() 메서드를 호출해주면 된다. 이렇게 만들어두면 레벨의 업그레이드 순서는
Level 이넘 안에서 관리할 수 있다. 다음 단계의 레벨이 무엇인지를 일일이 if 조건식을 만들어서 비지니스 로직에 담아둘 필요가 없다.

 다음으로 사용자 정보가 바뀌는 부분을 UserService 메서드에서 User로 옮겨보자. User의 내부 정보가 변경되는 것은
UserService보다는 User가 스스로 다루는 게 적절하다. User는 사용자 정보를 담고 있는 단순한 자바빈이긴 하지만 User도
엄연히 자바 오브젝트이고 내부 정보를 다루는 기능이 있을 수 있다.
UserService가 일일이 레벨 업그레이드 시에 User의 어떤 필드를 수정한다는 로직을 갖고 있기보다는, User에게 레벨 업그레이드를 해야
하니 정보를 변경하라고 요청하는 편이 낫다.