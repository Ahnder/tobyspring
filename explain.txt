3.4 컨텍스트와 DI

3.4.1 jdbcContext의 분리

 전략 패턴의 구조로 보자면 UserDao의 메서드가 클라이언트고, 익명 내부 클래스로
만들어지는 것이 개별 전략이고, jdbcContextWithStatementStrategy() 메서드는 컨텍스트다.
 컨텍스트 메서드는 UserDao 내의 PreparedStatement를 실행하는 기능을 가진 메서드에서
공유할 수 있다.
 그런데 JDBC의 일반적인 작업 흐름을 담고 있는 jdbcContextWithStatementStrategy()는
다른 DAO에서도 사용 가능하다.
 그러므로 jdbcContextWithStatementStrategy()를 UserDao 클래스 밖으로 독립시켜서
모든 DAO가 사용할 수 있게 할 수 있다.

 -클래스의 분리
 분리해서 만들 클래스 이름 : JdbcContext

 1. JdbcContext에 UserDao에 있던 컨텍스트 메서드를 workWithStatementStrategy()라는 이름으로
    옮긴다.
 2. 이렇게 하면 DataSource가 필요한 것은 UserDao가 아니라 JdbcContext가 돼버린다.
 3. DB커넥션을 필요로 하는 코드는 JdbcContet 안에 있기 때문이다
    따라서 JdbcContext가 DataSource에 의존하고 있으므로 DataSource 타입 빈을 DI 받을 수
    있게 해줘야 한다

 - 빈 의존관계 변경
  UserDao는 이제 JdbcContext에 의존하고 있다. 그런데 JdbcContext는 인터페이스인 DataSource와는 달리
 구체 클래스다
  스프링의 DI는 기본적으로 인터페이스를 사이에 두고 의존 클래스를 바꿔서 사용하도록 하는게 목적이다
 하지만 이 경우 JdbcContext는 그 자체로 독립적인 JDBC 컨텍스트를 제공해주는 서비스 오브젝트로서
 의미가 있을 뿐이고 구현 방법이 바뀔 가능성은 없다
  따라서 인터페이스를 구현하도록 만들지 않았고, UserDao와 JdbcContext는 인터페이스를 사이에
 두지 않고 DI를 적용하는 특별한 구조가 된다
  이런 빈 의존관계를 따라서 XML 설정파일을 수정해야 한다

      <bean id="userDao" class="user.dao.UserDao">
          // 밑의 dataSource 빈은 아직 UserDao 내에 JdbcContext를 적용하지 않은 메서드가 있어서
          // 제거하지 않고 유지중
          <property name="dataSource" ref="dataSource" />
          <property name="jdbcContext" ref="jdbcContext" />
      </bean>

      // 추가된 JdbcContext 타입 빈
          <bean id="jdbcContext" class="user.dao.JdbcContext">
              <property name="dataSource" ref="dataSource" />
          </bean>