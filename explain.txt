3.6 스프링의 JdbcTemplate

 스프링은 JDBC를 이용하는 DAO에서 사용할 수 있도록 준비된 다양한 템플릿과 콜백을 제공한다.
거의 모든 종류의 JDBC 코드에 사용 가능한 템플릿과 콜백을 제공할 뿐만 아니라, 자주 사용되는
패턴을 가진 콜백은 다시 템플릿에 결합시켜서 간단한 메서드 호출만으로 사용이 가능하도록
만들어져 있기 때문에 템플릿/콜백 방식의 기술을 사용하고 있는지 모르고도 쓸 수 있을 정도로
편리하다.

 스프링이 제공하는 JDBC 코드용 기본 템플릿은 JdbcTemplate이다. 앞에서 만들었던 JdbcContext와
유사하지만 훨씬 강력하고 편리한 기능을 제공해준다.

 현재 UserDao는 DataSource를 DI 받아서 JdbcContext에 주입해 템플릿 오브젝트로 만들어서 사용한다.
이 JdbcContext를 JdbcTemplate로 변경하자

public class UserDao {
    ...
    private JdbcTemplate jdbcTemplate;

    public void setDataSource(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);

        this.dataSource = dateSource;
    }
}

3.6.1 update()

 deleteAll()에 처음 적용했던 콜백은 StatementStrategy 인터페이스의 makePreparedStatement() 메서드다.
이에 대응되는 JdbcTemplate의 콜백은 PreparedStatementCreator 인터페이스의 createPreparedStatement() 메서드다.
템플릿으로부터 Connection을 제공받아서 PreparedStatement를 만들어 돌려준다는 면에서 구조는 동일하다.
PreparedStatementCreator 타입의 콜백을 받아서 사용하는 JdbcTemplate의 템플릿 메서드는 update() 다.

3.6.2 queryForInt()

 getCount()는 SQL 쿼리를 실행하고 ResultSet을 통해 결과 값을 가져오는 코드다. 이런 작업 흐름을 가진 코드에서
사용할 수 있는 템플릿은 PreparedStatementCreator 콜백과 ResultSetExtractor 콜백을 파라미터로 받는 query() 메서드다.

 ResultSetExtractor는 PreparedStatement의 쿼리를 실행해서 얻은 ResultSet을 전달 받는 콜백이다.
ResultSetExtractor 콜백은 템플릿이 제공하는 ResultSet을 이용해 원하는 값을 추출해서 템플릿에 전달하면,
템플릿은 나머지 작업을 수행한 뒤에 그 값을 query() 메서드의 리턴 값으로 돌려준다.

3.6.3 queryForObject

 get() 메서드의 SQL은 바인딩이 필요한 치환자를 갖고 있다. 이것까지는 add()에서 사용했던 방법을 적용하면 된다.
남은 것은 ResultSet에서 getCount() 처럼 단순한 값이 아니라 복잡한 User 오브젝트로 만드는 것이다.
ResultSet의 결과를 User 오브젝트를 만들어 프로퍼티에 넣어줘야 한다.

 이를 위해 getCount()에 적용했던 ResultSetExtractor 콜백 대신 RowMapper 콜백을 사용한다.
ResultSetExtractor와 RowMapper 모두 템플릿으로부터 ResultSet을 전달받고, 필요한 정보를 추출해서 리턴하는
방식으로 동작한다.
다른 점은 ResultSetExtractor는 ResultSet을 한 번 전달받아 알아서 추출 작업을 모두 진행하고 최종 결과만
리턴해주면 되는 데 반해, RowMapper는 ResultSet의 로우 하나를 매핑하기 위해 사용되기 때문에 여러번
호출될 수 있다는 점이다.
